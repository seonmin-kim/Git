Jira

"이슈 관리 시스템"은 버그 추적 시스템에서 시작되어서 현재는 버그뿐만이 아니라 일반적인 이슈에서 부터 프로젝트 관리까지를 지원한다.
각각의 작업을 이슈라는 단위로 관리

Issue 단위의 작업 절차

User Story
사용자의 요구 사항이나 개발의 대상이 되는 기능이다. User Story를 구현하기 위해서 각각의 User Story는 구체적인 작업인 Task를 하위작업으로 가지고 있다.
Task
User Story의 하위 작업으로 User Story를 위해서 개발자가 실제로 작업해야 하는 각각의 단위 작업을 의미한다.
Bugs
개발과정중에 보고된 버그
Enhancement Request
기능 개선 요청으로 기능 추가 작업이다.

이 이슈단위로 작업을 진행하는 절차를 정리해보면 다음과 같다.

1- 먼저 PM이 요구 사항을 취합하여 User Story를 작성한다.
2- 다음으로 User Story를 구현하기 위해서 실제 Task들을 해당 User Story 아래에 생성한다.
3- 다음으로 생성된 Task들을 개발자에게 지정(Assign) 한다.
4- 또는 Assign 되지 않은 작업에 대해서 개발자가 스스로 작업을 가지고 가서 작업을 진행한다.

실제로 하나의 예를 들어보자.

프로젝트 진행을 위한 환경 설정을 하기 위해서 개발 환경 설정이라는 이슈를 이슈#1에 User Story 타입으로 생성하였다.
다음으로 JIRA의 환경 설정 SubVersion의 설치, ANT설치를 각각 Task로 생성하고 JIRA 환경 설정은 choi씨에게 지정하였다. choi씨는 지라에 로그인하여 자신에게 "JIRA 환경 설정" 에 대한 Task가 지정되어 있음을 확인하고 해당 이슈를 진행한후 Close 하였다.

장점

특정 이슈를 누가 발견했는지, 누가 해결해야 하는지, 이슈는 현재 어떤 상태인지 파악하고 한눈에 해결 및 관리할 수 있습니다. 단순히 메일이나, 구두로 업무를 진행하는 것보다 한눈에 프로젝트팀원들의 작업 현황을 확인하고 스케줄이나 우선순위를 조절할 수 있다는 장점이 있죠.
실무자의 경우는 이슈에 대한 역할과 임무를 분명히 할 수 있으며, 협업 시 불필요한 커뮤니케이션 비용을 줄일 수 있습니다.
이슈 해결에 대한 히스토리가 남기 때문에 후에 비슷한 이슈가 발생했을 때 처리 과정을 되짚어 볼 수 있는 자산이 됩니다. 개발 단계에서 버그를 관리하거나, 소스 혹은 이미지의 수정 내역을 남길 수 있다는 점에서도 편리합니다.

단점

간단하게, 먼저 JIRA 유료다. 10user는 10$로 싸지만 딱 거기까지이고 그 이상은 비용의 부담이 있어 보인다.
화면이 복잡하다. 레드마인도 그랬지만 지라도 익숙하지 않은 상태에서 너무 해줄게 많았다.
이슈를 만들고 할당하고 상태를 관리하는 것이 좀더 편했으면 좋겠다.

가격(10% 부가세 별도)

10명 - 월 $10
25명 - 월 $2000
50명 - 월 $3600
...
