버전관리 = 형상관리 -> 변화의 관리
버전관리 시스템은 소스코드의 중요한 변화들을 기록하는 행위라고 할 수 있습니다.
이것은 어떤 문제가 발생했을 때 문제의 맥락을 파악 할 수 있도록 도와주고,
변화에 실패 했을 때 과거의 상태로 쉽게 돌아갈 수 있게 해줍니다.
결과적으로 실패에 대한 부담이 줄어들고 좀 더 자신감있게 공부를 할 수 있는 효과가 있습니다.
뿐만 아니라 버전관리는 백업, 협업과 같은 중대한 장점을 제공합니다.

GIT의 기본적인 사용방법은 명령어를 이용하는 것입니다.
GUI 기반으로 GIT을 사용할 수 있는 SourceTree를 이용해서 GIT의 사용법을 쉽게 익히실 수 있습니다.

여러가지 버전관리 시스템 중 하나 Git

버전 -> 의미있는 변화들 = 기능 개선, 버그 수정

위키피디아 = 위키백과사전(여러명의 사람이 같이 만드는 백과사전) -> 역사보기 = 버전관리 비교가능

SourceTree - GUI환경에서 git을 제어할 수 있는 도구

SourceTree
- 도구 -> 옵션 -> 언어 바꾸기 가능. 기본 사용자 정보 설정해줘야함(이름, 이메일)
- 저장소 생성
   프로젝트를 저장할 곳 선택, 저장소 타입 Git
   그 폴더에 파일을 생성하면 파일 상태부분에 바로 소스트리에 생성된 파일이 나타남
   선택된 파일 올리고 왼쪽 위에 커밋을 누르면 커밋내용을 쓸 곳이 나타난다.
   변경 내용 꼭 써주고 커밋을 누르면 변경사항이 올라간다.
   해당 문서가 변경된 사항이 있으면 소스트리에 변경된 문서가있다고 뜸.
   똑같이 커밋 실행하면 변경사항 저장됨.

   CopyBoard에서 마우스 오른쪽 클릭 후 제거를 누르면 실제 폴더 안에 파일도 삭제됨.
   버전관리에서 마우스 오른쪽 클릭 후 아카이브를 누르면 알집파일로 해당버전 다운 가능.
   폐기 버튼을 누르면 수정사항만 지워짐. 실제 파일도 수정됨.

   Reset = 버전에서 오른쪽 버튼 -> 이 커밋까지 현재 브랜치를 초기화
	-> Mixed 누르면 버전에서 지우고 Copyboard에 남아있음.
	-> Hard 누르면 버전도 지우고 실제 파일도 변경됨.
   Revert = 버전은 삭제안하고 수정 전 상황으로 돌아가고 싶을때
	   오른쪽 버튼 클릭 -> 커밋 되돌리기 -> Revert "버전제목" 이라는 버전이 생김
	   바로 이전껏만 Revert 가능. 더 이전것을 하려면 순서대로 하나씩 Revert 하면서 내려옴.
	   더 이전 것을 한번에 Revert 하려고 누르면 충돌발생.

	브랜치
	생성 시 작업 사본 부모 선택하면 선택한(Master)를 기준으로 생성됨
	서로 다른 내용을 커밋하게 되면 달라지는 부분부터 저장되는 길이 달라짐
	병합할 때 - Master에 들어간 후 Test브랜치를 오른쪽버튼 클릭
	현재 브랜치로 병합하기 - Test브랜치의 내용을 Master에 병합한다.
							다른부분은 Test의 내용으로 바꾸고 기본내용은 그대로. 그래프 그대로
	현재 변경사항을 Test로 재배치 - 지금까지의 변경사항을 Test에 병합한다. 그래프 하나로됨
								Master에 Test를 기준으로 병합됨.

  충돌해결 - 충돌이나면 변경되지않은 파일에 들어가보면 <<<<  ======  >>>>> 이런표시들이 있다.
  		  ===== 와 헤드사이는 Master의 부분이고 >>>>> 부분이 Test부분이다.
  		  이부분을 지우고 수정된 부분을 저장해주고 소스트리에서 마우스오른쪽버튼을 눌러
  		  해결된것으로 표시를 누르면 충돌해결로 표시됨. 그다음 커밋하면 충돌해결됨.

  충돌의 최소화 - master의 내용을 브랜치하나를 생성하여 그곳에 꾸준히 병합하여 관리한다.
                그리고 브랜치의 내용을 master에 병합하면 충돌이 최소화 된다.

  원격 저장소 - Github, dropbox, N drive, google drive ...
               gitlab - github에 비해 많이 불안정하다. github를 벤치마킹하여 만든 프로젝트. 자신의 서버에 저장할 수 있게 함
               github - private 한 저장소를 사용하고 싶으면 돈을 내야한다.
  push - 로컬에 있는 정보를 원격에 연결되있는 저장소에 보내는 것이 push
  push 한 이후에 로컬에 있는 정보를 수정하여 커밋하면 브랜치 옆에 숫자가 생긴다.
  이 숫자는 원격저장소와 로컬저장소와의 차이를 알려주는 것이다.

  협업 - 로컬에 새로운 저장소를 클론하여 생성가능.
         각 pull과 push가 생기면 pull 먼저 하고 push를 해라
         충돌의 최소화 pull > work > commit > pull > push
         문서 비교 프로그램 - winmerge, diffmerge

         https://sourcegear.com/diffmerge/
         https://desktop.github.com/

